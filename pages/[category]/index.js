import { NavLayout, CategoryLayout } from "../../components/Layouts";
import {
  LocationBarterButtons,
  Button,
  FilterButton,
} from "../../components/Buttons";
import {
  getAllCategories,
  getCategoryData,
} from "../../lib/data-access/category";
// import { getSession } from "next-auth/react";
// import { getItems } from "../../../lib/controllers/item-controller";
import useMapStore from "../../store/useMapStore";
import Head from "next/head";
import { useRouter } from "next/router";
import usePaginate from "../../lib/hooks/usePaginate";
import { ItemCard } from "../../components/Cards";
import { ItemCardSkeleton } from "../../components/Loaders";
import { FacePendingFilled } from "@carbon/icons-react";
import InfiniteScroll from "react-infinite-scroll-component";
import { useState } from "react";
import { FilterModal } from "../../components/Modals";

export async function getServerSideProps(context) {
  const { params } = context;
  // const { listingRadius, listingPosition } = useMapStore.getState();
  // const session = await getSession(context);
  const categories = await getAllCategories();
  const categoryData = await getCategoryData(params.category);
  const categoryNames = categories.map((category) =>
    category.name.toLowerCase()
  );

  if (!categoryNames.includes(params.category.toLowerCase())) {
    return { notFound: true };
  }

  // console.log(categoryNames);

  // const data = await getItems(
  //   session && session.user ? session.user.id : null,
  //   params.category,
  //   {
  //     page: 1,
  //     limit: 8,
  //     ...(listingPosition && Object.keys(listingPosition).length
  //       ? { ...listingPosition, radius: listingRadius }
  //       : {}),
  //   }
  // );
  return {
    props: {
      data: JSON.parse(JSON.stringify(categoryData)),
    },
  };
}

export default function Category({ data }) {
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [filters, setFilters] = useState({});
  const { listingRadius, listingPosition, listingRegion } = useMapStore();
  const router = useRouter();
  const { category } = router.query || null;
  const {
    data: items,
    isEndReached,
    isLoading,
    size,
    setSize,
    error,
    mutate,
  } = usePaginate(
    `/api/categories/${category}`,
    8,
    {
      ...(listingPosition && Object.keys(listingPosition).length
        ? { ...listingPosition, radius: listingRadius, ...filters }
        : {}),
    }
    // { initalData: data && data.length ? data : null }
  );

  const itemCards = (items.length ? items : []).map((item) => (
    <ItemCard
      key={item?._id || item?.id}
      name={item?.name}
      exchangeFor={item?.exchangeFor}
      image={item?.image?.url}
      to={`/items/${item?._id || item?.id}`}
      duration={item?.duration}
      offers={item?.offersCount}
      createdAt={item?.createdAt}
    />
  ));

  return (
    <div className="flex w-full flex-col gap-4">
      <FilterModal
        isOpen={isFilterOpen}
        onClose={() => setIsFilterOpen(false)}
        onApply={(value) => setFilters(value)}
        initialValues={filters}
        options={data.filterFields}
      />
      <Head>
        <title className="capitalize">
          {category
            ? `${category
                .split("+")
                .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
                .join(" ")}`
            : "Loading..."}{" "}
          | Barter Items at your Town
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <LocationBarterButtons />
      <div className="container relative mx-auto">
        {/* <InfiniteScroll
          dataLength={items.length}
          next={() => setSize(size + 1)}
          hasMore={!isEndReached}
          className={`grid grid-cols-[repeat(auto-fill,_minmax(150px,_1fr))] gap-4 pb-4 
           lg:grid-cols-[repeat(auto-fill,_minmax(250px,_1fr))] lg:gap-6 lg:py-6 ${
             !items.length && isEndReached
               ? "min-h-[80vh] grid-cols-1 lg:grid-cols-1"
               : ""
           }`}
          loader={[...Array(8)].map((_, i) => (
            <ItemCardSkeleton key={i} />
          ))}
        >
          {items.length ? (
            itemCards
          ) : !isLoading ? (
            <p className="m-auto flex max-w-[60%] flex-col items-center justify-center gap-2 text-center font-display text-xl text-gray-200/70">
              <FacePendingFilled size={100} />
              Nothing to show{" "}
              <span className="font-semibold">
                {listingRegion ? `${listingRegion} - ${listingRadius}km` : ""}
              </span>
            </p>
          ) : null}
        </InfiniteScroll> */}
        <div
          className={`grid grid-cols-[repeat(auto-fill,_minmax(150px,_1fr))] gap-4 pb-4 
           lg:grid-cols-[repeat(auto-fill,_minmax(250px,_1fr))] lg:gap-6 lg:py-6 ${
             !items.length && isEndReached
               ? "min-h-[80vh] grid-cols-1 lg:grid-cols-1"
               : ""
           }`}
        >
          <div className="col-span-full flex h-fit justify-end border-b border-b-gray-100 pb-4">
            <FilterButton
              onClick={() => setIsFilterOpen(true)}
              isActive={Object.keys(filters).length}
            />
          </div>
          {items?.length ? (
            itemCards
          ) : !isEndReached || isLoading ? (
            [...Array(8)].map((_, i) => <ItemCardSkeleton key={i} />)
          ) : (
            <p className="m-auto flex max-w-[60%] flex-col items-center justify-center gap-2 text-center font-display text-xl text-gray-200/70">
              <FacePendingFilled size={100} />
              Nothing to show
            </p>
          )}
          {/* {isLoading &&
                    [...Array(8)].map((_, i) => <ItemCardSkeleton key={i} />)} */}
        </div>
        {!isEndReached && !isLoading ? (
          <div className="mx-auto mb-8 w-full max-w-[300px]">
            <Button secondary={true} onClick={() => setSize(size + 1)}>
              Load More
            </Button>
          </div>
        ) : null}
      </div>
    </div>
  );
}

Category.getLayout = function getLayout(page) {
  return (
    <NavLayout>
      <CategoryLayout />
      {page}
    </NavLayout>
  );
};
