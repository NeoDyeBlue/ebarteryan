import { NavLayout } from "../../components/Layouts";
import Head from "next/head";
import { Locked } from "@carbon/icons-react";
// import { ResendOTP } from "otp-input-react";
import { FormikProvider, Form, useFormik } from "formik";
import { Button } from "../../components/Buttons";
import { DotLoader } from "react-spinners";
import { useState } from "react";
import { InputField } from "../../components/Inputs";
import { newPasswordSchema } from "../../lib/validators/user-validator";
import { useRouter } from "next/router";
import { toast } from "react-hot-toast";

export default function PasswordReset() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const passwordFormik = useFormik({
    initialValues: {
      password: "",
      confirmPassword: "",
    },
    onSubmit: handlePasswordSubmit,
    validationSchema: newPasswordSchema,
  });

  async function handlePasswordSubmit(values) {
    try {
      setIsSubmitting(true);
      values.token = router.query.token;
      const res = await fetch(`/api/password/new`, {
        method: "PATCH",
        body: JSON.stringify(values),
        headers: { "Content-Type": "application/json" },
      });
      const result = await res.json();
      if (result && result.success) {
        toast.success("Password updated, please login to your account.");
        router.push("/login");
      } else {
        toast.error(result.errorMessage);
      }
      setIsSubmitting(false);
    } catch (error) {
      setIsSubmitting(false);
      toast.error("Can't update passsword");
    }
  }

  return (
    <div className="w-full">
      <Head>
        <title>New Password | eBarterYan</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto flex min-h-[calc(100vh-70px-57.25px)] md:min-h-[calc(100vh-71.5px)]">
        <div
          className="m-auto flex w-full max-w-[380px] flex-col items-center justify-center gap-6
        rounded-[10px] border border-gray-100 bg-white p-6 shadow-lg"
        >
          <Locked size={100} className="text-gray-100" />
          {/* <h1 className="text-4xl font-semibold">New Password</h1> */}
          <div className="flex w-full flex-col gap-4 text-center">
            <p>Enter your new password</p>
            <FormikProvider value={passwordFormik}>
              <Form className="flex w-full flex-col gap-4">
                <InputField
                  label="New Password"
                  type="password"
                  name="password"
                />
                <InputField
                  label="Confirm Password"
                  type="password"
                  name="confirmPassword"
                />
                <div className="flex w-full flex-col items-center gap-4">
                  <Button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? (
                      <DotLoader color="#fff" size={24} />
                    ) : (
                      <p>Done</p>
                    )}
                  </Button>
                </div>
              </Form>
            </FormikProvider>
          </div>
        </div>
      </div>
    </div>
  );
}

PasswordReset.getLayout = function getLayout(page) {
  return <NavLayout>{page}</NavLayout>;
};
