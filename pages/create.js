import Head from "next/head";
import dynamic from "next/dynamic";
import { IconDescription } from "../components/Icons";
import { CreationLayout } from "../components/Layouts";
import { LocationModal } from "../components/Modals";
import {
  InputField,
  Textarea,
  ImageSelector,
  RadioSelect,
  RadioSelectItem,
  MultiSelect,
  MultiSelectItem,
} from "../components/Inputs";
const DropdownSelect = dynamic(
  () => import("../components/Inputs/DropdownSelect"),
  { ssr: false }
);
import { useState } from "react";
import { Location } from "@carbon/icons-react";
import { Collaborate, Delivery, Chat } from "@carbon/icons-react";
import { Button } from "../components/Buttons";
import ReactModal from "react-modal";
import useMapStore from "../store/useMapStore";
import { CreateListingForm } from "../components/Forms";

export default function Create() {
  ReactModal.setAppElement("#__next");
  const [formData, setFormData] = useState({
    category: "",
    offeringTime: "",
    claimingOptions: {
      toBeDecided: false,
      delivery: false,
      meetup: false,
    },
    condition: "",
  });

  const {
    creationPosition,
    creationRegion,
    listingPosition,
    listingRegion,
    clearPositionRegion,
  } = useMapStore();

  function handleMultiSelectChange(event) {
    const { checked, name } = event.target;

    setFormData((prev) => ({
      ...prev,
      claimingOptions: {
        ...prev.claimingOptions,
        [name]: checked,
      },
    }));
  }

  function handleChange(event) {
    const { name, value, type, checked } = event.target;
    setFormData((prevFormData) => {
      return {
        ...prevFormData,
        [name]: type === "checkbox" ? checked : value,
      };
    });
  }

  const [locationModalOpen, setLocationModalOpen] = useState(false);
  function openLocationModal() {
    setLocationModalOpen(true);
  }

  function closeLocationModal() {
    setLocationModalOpen(false);
    clearPositionRegion();
  }

  function handleFormSubmit(event) {
    event.preventDefault();
    console.log("submit");
  }

  return (
    <div className="w-full">
      <Head>
        <title>Make a Barter | Barter Items at your Town</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ReactModal
        contentLabel="Location Modal"
        isOpen={locationModalOpen}
        // closeTimeoutMS={300}
        overlayClassName={`bg-black/20 fixed top-0 z-50 flex h-full w-full items-end`}
        preventScroll={true}
        onRequestClose={closeLocationModal}
        bodyOpenClassName="modal-open-body"
        className={`relative h-[90vh] w-full overflow-hidden rounded-t-[10px] bg-white
         py-6 shadow-lg md:m-auto md:max-w-[580px] md:rounded-[10px]`}
      >
        <div
          className={`custom-scrollbar container flex max-h-full min-h-full overflow-y-auto md:px-6`}
        >
          <LocationModal onClose={closeLocationModal} />
          {/* <OfferModal onClose={closeOfferModal} /> */}
        </div>
      </ReactModal>
      <div className="container mx-auto">
        <CreateListingForm />
      </div>
    </div>
  );
}

Create.getLayout = function getLayout(page) {
  return <CreationLayout>{page}</CreationLayout>;
};
